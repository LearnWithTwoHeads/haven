---
- name: Setup Kubernetes cluster with kubeadm
  hosts: kube-nodes
  become: yes
  gather_facts: yes
  
  vars:
    kubernetes_version: "v1.33"
    crio_version: "v1.33"
    cni_plugins_version: "v1.7.1"
  
  tasks:
    - name: detect_system_architecture
      set_fact:
        system_arch: "{{ ansible_architecture }}"
        cni_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else 'unsupported' }}"
    
    - name: fail_on_unsupported_architecture
      fail:
        msg: "Unsupported architecture: {{ ansible_architecture }}"
      when: cni_arch == 'unsupported'
    
    - name: disable_swap
      shell: swapoff -a
      changed_when: false
    
    - name: add_swap_disable_to_cron
      cron:
        name: "Disable swap on boot"
        special_time: reboot
        job: "/sbin/swapoff -a"
        state: present
    
    - name: configure_kernel_modules_file
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        mode: '0644'
      notify: load_kernel_modules
    
    - name: load_kernel_modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
    
    - name: configure_sysctl_networking
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/k8s.conf
        reload: yes
      loop:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }
    
    - name: install_system_packages
      apt:
        name:
          - software-properties-common
          - curl
          - apt-transport-https
          - ca-certificates
          - gpg
        state: present
        update_cache: yes
    
    - name: create_apt_keyrings_directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
    
    - name: add_crio_repository_key
      shell: |
        curl -fsSL https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ crio_version }}/deb/Release.key | 
        gpg --batch --yes --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/cri-o-apt-keyring.gpg
    
    - name: add_crio_repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ crio_version }}/deb/ /"
        filename: cri-o
        state: present
    
    - name: install_crio
      apt:
        name: cri-o
        state: present
        update_cache: yes
    
    - name: start_crio_service
      systemd:
        name: crio
        state: started
        enabled: yes
        daemon_reload: yes
    
    - name: add_kubernetes_repository_key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/Release.key | 
        gpg --batch --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    
    - name: add_kubernetes_repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/deb/ /"
        filename: kubernetes
        state: present
    
    - name: create_cni_bin_directory
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'
    
    - name: install_cni_plugins
      unarchive:
        src: "https://github.com/containernetworking/plugins/releases/download/{{ cni_plugins_version }}/cni-plugins-linux-{{ cni_arch }}-{{ cni_plugins_version }}.tgz"
        dest: /opt/cni/bin
        remote_src: yes
        creates: /opt/cni/bin/loopback
        mode: '0755'
    
    - name: install_kubernetes_tools
      apt:
        name:
          - kubelet
          - kubeadm
        state: present
        update_cache: yes
    
    - name: prefetch_kubernetes_images
      command: kubeadm config images pull --cri-socket=/var/run/crio/crio.sock
      register: image_pull_result
      changed_when: "'Already exists' not in image_pull_result.stdout"
  
  handlers:
    - name: load_kernel_modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
